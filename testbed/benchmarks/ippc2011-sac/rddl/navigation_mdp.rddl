////////////////////////////////////////////////////////////////////
//
// Navigation MDP
//
// Author: Scott Sanner (ssanner [at] gmail.com)
//
// State action constraints added by Thomas Keller 
// (tkeller [at] informatik.uni-freiburg.de)
//
////////////////////////////////////////////////////////////////////

domain navigation_mdp {
	requirements = {
//		constrained-state,
		reward-deterministic
	};
	
	types {
		xpos : object;
		ypos : object;
	};
	
	pvariables {

		NORTH(ypos, ypos) : {non-fluent, bool, default = false};
		SOUTH(ypos, ypos) : {non-fluent, bool, default = false};
		EAST(xpos, xpos)  : {non-fluent, bool, default = false};
		WEST(xpos, xpos)  : {non-fluent, bool, default = false};

		MIN-XPOS(xpos) : {non-fluent, bool, default = false};
		MAX-XPOS(xpos) : {non-fluent, bool, default = false};
		MIN-YPOS(ypos) : {non-fluent, bool, default = false};
		MAX-YPOS(ypos) : {non-fluent, bool, default = false};
	
		P(xpos, ypos) : {non-fluent, real, default = 0.0};
		
		GOAL(xpos,ypos) : {non-fluent, bool, default = false};
		
		// Fluents
		robot-at(xpos, ypos) : {state-fluent, bool, default = false};
		
		// Actions
		move-north : {action-fluent, bool, default = false};
		move-south : {action-fluent, bool, default = false};
		move-east  : {action-fluent, bool, default = false};
		move-west  : {action-fluent, bool, default = false};
	};
	
	cpfs {
	
		robot-at'(?x,?y) =
		
			if ( GOAL(?x,?y) ^ robot-at(?x,?y)  )
			then 
				KronDelta(true)
			else if (( exists_{?x2 : xpos, ?y2 : ypos} [ GOAL(?x2,?y2) ^ robot-at(?x2,?y2)  ] )
					 | ( move-north ^ exists_{?y2 : ypos} [ NORTH(?y,?y2) ^ robot-at(?x,?y) ] )
					 | ( move-south ^ exists_{?y2 : ypos} [ SOUTH(?y,?y2) ^ robot-at(?x,?y) ] )
					 | ( move-east ^ exists_{?x2 : xpos} [ EAST(?x,?x2) ^ robot-at(?x,?y) ] )
					 | ( move-west ^ exists_{?x2 : xpos} [ WEST(?x,?x2) ^ robot-at(?x,?y) ] ))
			then 
				KronDelta(false) 
			else if (( move-north ^ exists_{?y2 : ypos} [ NORTH(?y2,?y) ^ robot-at(?x,?y2) ] )
					 | ( move-south ^ exists_{?y2 : ypos} [ SOUTH(?y2,?y) ^ robot-at(?x,?y2) ] )
					 | ( move-east ^ exists_{?x2 : xpos} [ EAST(?x2,?x) ^ robot-at(?x2,?y) ] )
					 | ( move-west ^ exists_{?x2 : xpos} [ WEST(?x2,?x) ^ robot-at(?x2,?y) ] ))
			then 
				Bernoulli( 1.0 - P(?x, ?y) ) 
			else 
				KronDelta( robot-at(?x,?y) );
				
	};
	
	// 0 reward for reaching goal, -1 in all other cases
	reward = [sum_{?x : xpos, ?y : ypos} -(GOAL(?x,?y) ^ ~robot-at(?x,?y))]; 
	
	state-action-constraints {
                // Do not allow movement "outside" of the grid.
                move-south => (forall_{?x : xpos, ?y : ypos} [~MIN-YPOS(?y) | ~robot-at(?x,?y)]);
                move-north => (forall_{?x : xpos, ?y : ypos} [~MAX-YPOS(?y) | ~robot-at(?x,?y)]);
                move-west => (forall_{?x : xpos, ?y : ypos} [~MIN-XPOS(?x) | ~robot-at(?x,?y)]);
                move-east => (forall_{?x : xpos, ?y : ypos} [~MAX-XPOS(?x) | ~robot-at(?x,?y)]);

                // Do not allow any movement if the agent is "dead"
                move-south => (exists_{?x : xpos, ?y : ypos} [robot-at(?x,?y)]);        
                move-north => (exists_{?x : xpos, ?y : ypos} [robot-at(?x,?y)]);
                move-west => (exists_{?x : xpos, ?y : ypos} [robot-at(?x,?y)]);
                move-east => (exists_{?x : xpos, ?y : ypos} [robot-at(?x,?y)]);

                // Do not allow any movement if the agent is at goal
                move-south => (~exists_{?x : xpos, ?y : ypos} [robot-at(?x,?y) ^ GOAL(?x,?y)]);        
                move-north => (~exists_{?x : xpos, ?y : ypos} [robot-at(?x,?y) ^ GOAL(?x,?y)]);
                move-west => (~exists_{?x : xpos, ?y : ypos} [robot-at(?x,?y) ^ GOAL(?x,?y)]);
                move-east => (~exists_{?x : xpos, ?y : ypos} [robot-at(?x,?y) ^ GOAL(?x,?y)]);
	};
	
}
